{
  "provider": "stripe",
  "version": "v0",
  "content": "# Stripe API – Complete Reference for Automation Agent\n\n---\n\n## 1. Authentication & General Rules\n\n- **Auth type**: Bearer token (Secret key)\n- **Header example**:\n  ```\n  Authorization: Bearer sk_test_... or sk_live_...\n  Content-Type: application/json\n  ```\n- **Base URL**: https://api.stripe.com/v1\n- **Token placement**: Must be in HTTP header only\n- **Encryption**: HTTPS with TLS 1.2+ required\n- Do **not** send token in query parameters\n- JSON request/response only\n\n---\n\n## 2. Rate Limits & Retry Behavior\n\n- **Rate limits**:\n  - **Live mode**: 100 requests per second\n  - **Test mode**: 25 requests per second\n- **Monitoring**:\n  - Response headers include `Stripe-Version`, `Request-Id`\n- **On rate limit (429)**:\n  - Response: `{ \"error\": { \"type\": \"rate_limit_error\", \"message\": \"...\" } }`\n  - Use **exponential backoff**, respecting `Retry-After` header\n- **Best practices**:\n  - Implement idempotency keys for POST requests\n  - Use webhooks for real-time updates\n  - Cache when possible\n\n---\n\n## 3. Core Endpoints\n\n### 3.1 `POST /v1/payment_intents`\n\n- **Purpose**: Create a PaymentIntent for processing payments\n- **Body parameters (JSON)**:\n  - `amount` *(integer, required)* — amount in cents (e.g., 2000 = $20.00)\n  - `currency` *(string, required)* — e.g., `\"usd\"`, `\"eur\"`\n  - `payment_method_types` *(array, optional)* — e.g., `[\"card\", \"sepa_debit\"]`\n  - `customer` *(string, optional)* — customer ID\n  - `description` *(string, optional)* — payment description\n  - `metadata` *(object, optional)* — custom metadata\n  - `confirmation_method` *(string, optional)* — `\"automatic\"` or `\"manual\"`\n  - `capture_method` *(string, optional)* — `\"automatic\"` or `\"manual\"`\n\n- **Sample Request**:\n  ```json\n  {\n    \"amount\": 2000,\n    \"currency\": \"usd\",\n    \"payment_method_types\": [\"card\"],\n    \"description\": \"Payment for order #123\",\n    \"metadata\": {\n      \"order_id\": \"123\"\n    }\n  }\n  ```\n\n- **Sample Response**:\n  ```json\n  {\n    \"id\": \"pi_1234567890\",\n    \"object\": \"payment_intent\",\n    \"amount\": 2000,\n    \"currency\": \"usd\",\n    \"status\": \"requires_payment_method\",\n    \"client_secret\": \"pi_1234567890_secret_...\",\n    \"created\": 1640995200\n  }\n  ```\n\n### 3.2 `POST /v1/customers`\n\n- **Purpose**: Create a customer for recurring payments\n- **Body parameters**:\n  - `email` *(string, optional)* — customer email\n  - `name` *(string, optional)* — customer name\n  - `phone` *(string, optional)* — customer phone\n  - `metadata` *(object, optional)* — custom metadata\n  - `source` *(string, optional)* — payment method ID\n\n- **Sample Request**:\n  ```json\n  {\n    \"email\": \"customer@example.com\",\n    \"name\": \"John Doe\",\n    \"metadata\": {\n      \"customer_type\": \"premium\"\n    }\n  }\n  ```\n\n### 3.3 `POST /v1/subscriptions`\n\n- **Purpose**: Create a subscription for recurring billing\n- **Body parameters**:\n  - `customer` *(string, required)* — customer ID\n  - `items` *(array, required)* — subscription items\n  - `payment_behavior` *(string, optional)* — `\"default_incomplete\"`, `\"allow_incomplete\"`\n  - `billing_cycle_anchor` *(integer, optional)* — Unix timestamp\n  - `proration_behavior` *(string, optional)* — `\"create_prorations\"`, `\"none\"`\n\n- **Sample Request**:\n  ```json\n  {\n    \"customer\": \"cus_1234567890\",\n    \"items\": [\n      {\n        \"price\": \"price_1234567890\"\n      }\n    ],\n    \"payment_behavior\": \"default_incomplete\"\n  }\n  ```\n\n### 3.4 `GET /v1/payment_intents/{id}`\n\n- **Purpose**: Retrieve a PaymentIntent\n- **URL parameters**:\n  - `id` *(string, required)* — PaymentIntent ID\n- **Query parameters**:\n  - `expand` *(array, optional)* — fields to expand\n\n### 3.5 `POST /v1/payment_intents/{id}/confirm`\n\n- **Purpose**: Confirm a PaymentIntent\n- **Body parameters**:\n  - `payment_method` *(string, optional)* — payment method ID\n  - `return_url` *(string, optional)* — redirect URL after payment\n\n### 3.6 `POST /v1/refunds`\n\n- **Purpose**: Create a refund\n- **Body parameters**:\n  - `payment_intent` *(string, required)* — PaymentIntent ID\n  - `amount` *(integer, optional)* — refund amount in cents\n  - `reason` *(string, optional)* — `\"duplicate\"`, `\"fraudulent\"`, `\"requested_by_customer\"`\n\n---\n\n## 4. Webhook Events\n\n### 4.1 Common Events\n\n- `payment_intent.succeeded` — Payment completed successfully\n- `payment_intent.payment_failed` — Payment failed\n- `customer.subscription.created` — New subscription created\n- `customer.subscription.updated` — Subscription updated\n- `customer.subscription.deleted` — Subscription cancelled\n- `invoice.payment_succeeded` — Invoice paid successfully\n- `invoice.payment_failed` — Invoice payment failed\n\n### 4.2 Webhook Endpoint Setup\n\n```javascript\n// Example webhook handler\napp.post('/webhook', express.raw({type: 'application/json'}), (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  const endpointSecret = 'whsec_...';\n\n  let event;\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n  } catch (err) {\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  switch (event.type) {\n    case 'payment_intent.succeeded':\n      const paymentIntent = event.data.object;\n      // Handle successful payment\n      break;\n    case 'payment_intent.payment_failed':\n      const failedPayment = event.data.object;\n      // Handle failed payment\n      break;\n  }\n\n  res.json({received: true});\n});\n```\n\n---\n\n## 5. Error Handling\n\n### 5.1 Common Error Types\n\n- `card_error` — Card was declined\n- `invalid_request_error` — Invalid parameters\n- `api_error` — Stripe API error\n- `authentication_error` — Invalid API key\n- `rate_limit_error` — Too many requests\n- `idempotency_error` — Duplicate request\n\n### 5.2 Error Response Format\n\n```json\n{\n  \"error\": {\n    \"type\": \"card_error\",\n    \"code\": \"card_declined\",\n    \"message\": \"Your card was declined.\",\n    \"decline_code\": \"insufficient_funds\"\n  }\n}\n```\n\n---\n\n## 6. Testing\n\n### 6.1 Test Card Numbers\n\n- **Success**: `4242424242424242`\n- **Decline**: `4000000000000002`\n- **Insufficient funds**: `4000000000009995`\n- **Expired card**: `4000000000000069`\n- **Incorrect CVC**: `4000000000000127`\n\n### 6.2 Test Mode vs Live Mode\n\n- **Test mode**: Use `sk_test_...` keys\n- **Live mode**: Use `sk_live_...` keys\n- **Webhook testing**: Use Stripe CLI\n\n---\n\n## 7. Best Practices for Automation\n\n### 7.1 Payment Flow\n\n1. **Create PaymentIntent** with amount and currency\n2. **Collect payment method** (card details, etc.)\n3. **Confirm PaymentIntent** with payment method\n4. **Handle webhook events** for final status\n5. **Store customer data** for future payments\n\n### 7.2 Subscription Management\n\n1. **Create customer** with email/name\n2. **Create subscription** with price ID\n3. **Handle subscription events** via webhooks\n4. **Update subscription** as needed\n5. **Cancel subscription** when required\n\n### 7.3 Security Considerations\n\n- **Never expose secret keys** in frontend code\n- **Use webhooks** for real-time updates\n- **Implement idempotency** for POST requests\n- **Validate webhook signatures**\n- **Use test mode** for development\n\n---\n\n## 8. Code Examples for Automation\n\n### 8.1 Create Payment\n\n```javascript\n// Create a payment intent\nconst paymentIntent = await stripe.paymentIntents.create({\n  amount: 2000, // $20.00\n  currency: 'usd',\n  payment_method_types: ['card'],\n  description: 'Payment for order #123',\n  metadata: {\n    order_id: '123'\n  }\n});\n\n// Return client secret for frontend\nreturn {\n  client_secret: paymentIntent.client_secret\n};\n```\n\n### 8.2 Create Customer\n\n```javascript\n// Create a customer\nconst customer = await stripe.customers.create({\n  email: 'customer@example.com',\n  name: 'John Doe',\n  metadata: {\n    customer_type: 'premium'\n  }\n});\n\n// Store customer ID for future use\nreturn {\n  customer_id: customer.id\n};\n```\n\n### 8.3 Create Subscription\n\n```javascript\n// Create a subscription\nconst subscription = await stripe.subscriptions.create({\n  customer: 'cus_1234567890',\n  items: [\n    {\n      price: 'price_1234567890'\n    }\n  ],\n  payment_behavior: 'default_incomplete',\n  expand: ['latest_invoice.payment_intent']\n});\n\nreturn {\n  subscription_id: subscription.id,\n  client_secret: subscription.latest_invoice.payment_intent.client_secret\n};\n```\n\n### 8.4 Process Refund\n\n```javascript\n// Create a refund\nconst refund = await stripe.refunds.create({\n  payment_intent: 'pi_1234567890',\n  amount: 1000, // Refund $10.00\n  reason: 'requested_by_customer'\n});\n\nreturn {\n  refund_id: refund.id,\n  status: refund.status\n};\n```\n\n---\n\n## 9. Integration Patterns\n\n### 9.1 E-commerce Integration\n\n1. **Cart checkout** → Create PaymentIntent\n2. **Payment confirmation** → Confirm PaymentIntent\n3. **Order fulfillment** → Handle webhook events\n4. **Refund processing** → Create refund\n\n### 9.2 Subscription Service\n\n1. **User registration** → Create customer\n2. **Plan selection** → Create subscription\n3. **Payment processing** → Handle subscription events\n4. **Plan changes** → Update subscription\n5. **Cancellation** → Cancel subscription\n\n### 9.3 Marketplace Integration\n\n1. **Seller onboarding** → Create connected accounts\n2. **Payment splitting** → Use application fees\n3. **Payout processing** → Create transfers\n4. **Dispute handling** → Monitor charge events\n\n---\n\n## 10. Monitoring & Analytics\n\n### 10.1 Key Metrics\n\n- **Payment success rate**\n- **Average transaction value**\n- **Customer lifetime value**\n- **Subscription churn rate**\n- **Refund rate**\n\n### 10.2 Dashboard Integration\n\n```javascript\n// Get payment analytics\nconst payments = await stripe.paymentIntents.list({\n  limit: 100,\n  created: {\n    gte: Math.floor(Date.now() / 1000) - (30 * 24 * 60 * 60) // Last 30 days\n  }\n});\n\nconst analytics = {\n  total_payments: payments.data.length,\n  total_amount: payments.data.reduce((sum, payment) => sum + payment.amount, 0),\n  successful_payments: payments.data.filter(p => p.status === 'succeeded').length\n};\n```\n\n---\n\nThis comprehensive Stripe API documentation provides all the essential information needed for automation agents to create, manage, and process payments through the Stripe platform."
} 