import React, { useState } from 'react';
import { Message } from '../../types/chat';
import { mask } from '../../utils/maskSecrets';

interface MessageBubbleProps {
  message: Message;
  onApprovePlan?: (planJSON: any) => void;
  onRejectPlan?: () => void;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ 
  message, 
  onApprovePlan, 
  onRejectPlan 
}) => {
  const [showCodePreview, setShowCodePreview] = useState(false);
  
  const isChecklistError = (content: string) => {
    return content?.startsWith('⚠️ STRICT CHECKLIST');
  };

  const generateCodePreview = () => {
    if (!message.planJSON) return '';

    // Generate code based on the comprehensive template system
    let code = `// Wispix Automation - Generated by Wispix\n`;
    code += `// Created: ${new Date().toISOString()}\n`;
    code += `// Using Comprehensive Template System with API Docs Integration\n\n`;
    
    code += `const axios = require('axios');\n\n`;
    
    // Generate functions for each step using the new template system
    message.planJSON.steps.forEach((step: any, index: number) => {
      const stepFunction = generateStepFunction(step, index);
      code += stepFunction;
    });
    
    // Add main execution function
    const steps = message.planJSON.steps;
    
    code += `\n// Main execution function\n`;
    code += `async function run() {\n`;
    code += `  try {\n`;
    code += `    console.log('🚀 Starting automation execution...');\n`;
    code += `    \n`;
    code += `    // Execute steps in sequence\n`;
    code += `    ${steps.map((step: any, index: number) => {
      return `const result${index + 1} = await ${step.id}(${index === 0 ? '{}' : `result${index}`});`;
    }).join('\n    ')}\n`;
    code += `    \n`;
    code += `    console.log('✅ Automation completed successfully!');\n`;
    code += `    return result${steps.length};\n`;
    code += `  } catch (error) {\n`;
    code += `    console.error('❌ Automation failed:', error);\n`;
    code += `    throw error;\n`;
    code += `  }\n`;
    code += `}\n\n`;
    code += `module.exports = { run };\n`;
    
    return code;
  };

  const generateStepFunction = (step: any, index: number) => {
    const baseUrl = getBaseUrl(step.provider);
    const authHeader = getAuthHeader(step.provider, step.config);
    const requestBody = getRequestBody(step);
    
    return `
async function ${step.id}(prevResults) {
  try {
    console.log('🔍 Executing ${step.provider} ${step.intent}...');
    
    const inputData = prevResults || {};
    
    // Build request configuration using template system
    const config = {
      method: '${step.method}',
      url: '${baseUrl}${step.endpoint}',
      headers: {
        'Content-Type': 'application/json'
        ${authHeader ? `,\n        'Authorization': '${authHeader}'` : ''}
      }
      ${requestBody ? `,\n      data: ${JSON.stringify(requestBody, null, 6)}` : ''}
    };

    console.log('🔍 Making ${step.method} request to:', config.url);
    ${requestBody ? `console.log('📋 Request body:', JSON.stringify(config.data, null, 2));` : ''}
    
    const response = await axios(config);
    
    console.log('✅ ${step.provider} ${step.intent} completed successfully!');
    console.log('📋 Response status:', response.status);
    
    return response.data;
    
  } catch (error) {
    console.error('❌ Error in ${step.provider} ${step.intent}:');
    console.error('📋 Status:', error.response?.status);
    console.error('📋 Message:', error.response?.data);
    console.error('📋 Full error:', error.message);
    throw error;
  }
}
`;
  };

  const getBaseUrl = (provider: string) => {
    const baseUrls: { [key: string]: string } = {
      airtable: 'https://api.airtable.com',
      openai: 'https://api.openai.com',
      notion: 'https://api.notion.com',
      slack: 'https://slack.com',
      stripe: 'https://api.stripe.com',
      github: 'https://api.github.com',
      email: 'https://api.email.com',
      google: 'https://www.googleapis.com',
      webhook: 'https://webhook.site'
    };
    return baseUrls[provider] || 'https://api.example.com';
  };

  const getAuthHeader = (provider: string, config: any) => {
    if (!config) return null;
    
    const authPatterns: { [key: string]: string | null } = {
      airtable: `Bearer ${config.personalAccessToken || 'YOUR_AIRTABLE_PAT'}`,
      openai: `Bearer ${config.apiKey || 'YOUR_OPENAI_API_KEY'}`,
      notion: `Bearer ${config.token || 'YOUR_NOTION_TOKEN'}`,
      slack: `Bearer ${config.token || 'YOUR_SLACK_TOKEN'}`,
      stripe: `Bearer ${config.apiKey || 'YOUR_STRIPE_API_KEY'}`,
      github: `Bearer ${config.token || 'YOUR_GITHUB_TOKEN'}`,
      email: `Bearer ${config.apiKey || 'YOUR_EMAIL_API_KEY'}`,
      google: `Bearer ${config.apiKey || 'YOUR_GOOGLE_API_KEY'}`,
      webhook: null
    };
    
    return authPatterns[provider] || null;
  };

  const getRequestBody = (step: any) => {
    if (step.method !== 'POST' && step.method !== 'PUT' && step.method !== 'PATCH') {
      return null;
    }

    const bodyPatterns: { [key: string]: any } = {
      airtable: { fields: step.outputAs },
      notion: { 
        parent: { database_id: step.config?.databaseId || 'YOUR_DATABASE_ID' },
        properties: { title: { title: [{ text: { content: 'Summary' } }] } }
      },
      openai: {
        model: step.config?.model || 'gpt-4',
        messages: [
          { role: 'system', content: 'Summarize the following data' },
          { role: 'user', content: step.inputFrom ? `\${JSON.stringify(${step.inputFrom})}` : 'data' }
        ],
        max_tokens: 500
      },
      slack: {
        channel: step.config?.channel || '#general',
        text: step.inputFrom ? `\${JSON.stringify(${step.inputFrom})}` : 'Notification'
      }
    };

    return bodyPatterns[step.provider] || {};
  };

  const renderPlan = () => {
    if (!message.planJSON) return null;

    return (
      <div className="bg-gray-50 rounded-lg p-4 mt-4">
        <h4 className="font-semibold text-gray-800 mb-2">📋 Automation Plan Steps:</h4>
        {message.planJSON.steps.map((step: any, index: number) => (
          <div key={step.id} className="mb-3 p-3 bg-white rounded border">
            <div className="flex items-center gap-2 mb-1">
              <span className="text-xs font-medium px-2 py-1 rounded bg-blue-100 text-blue-800">
                {step.provider}
              </span>
              <div className="ml-2 px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">
                API Docs Validated
              </div>
            </div>
            <div className="text-sm text-gray-600">
              <strong>Step {index + 1}:</strong> {step.intent} → {step.method} {step.endpoint}
            </div>
            <div className="text-xs text-gray-500 mt-1">
              Input: {step.inputFrom || 'none'} → Output: {step.outputAs}
            </div>
          </div>
        ))}
        
        <div className="mt-4">
          <h5 className="font-semibold text-gray-800 mb-2">🔐 Authentication Required:</h5>
          {message.planJSON.auth.map((auth: any, index: number) => (
            <div key={index} className="text-sm text-gray-600">
              • {auth.provider}: {auth.method}
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Handle checklist errors
  if (message.streamingState === 'checklist_error' || isChecklistError(message.text || '')) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 rounded-lg p-4 mb-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Checklist Validation Failed</h3>
            <div className="mt-2 text-sm text-red-700 whitespace-pre-wrap">{message.text}</div>
          </div>
        </div>
      </div>
    );
  }

  if (message.streamingState === 'plan_ready') {
    return (
      <div className="bg-white rounded-lg shadow-sm border p-4 mb-4">
        <div className="text-gray-800 whitespace-pre-wrap">{message.text}</div>
        
        {renderPlan()}
        
        <div className="mt-4 flex gap-2">
          <button
            onClick={() => onApprovePlan?.(message.planJSON)}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            ✅ Approve Plan
          </button>
          <button
            onClick={onRejectPlan}
            className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            ❌ Reject Plan
          </button>
        </div>
      </div>
    );
  }

  if (message.streamingState === 'generating_code') {
    return (
      <div className="bg-white rounded-lg shadow-sm border p-4 mb-4">
        <div className="text-gray-800 whitespace-pre-wrap">{message.text}</div>
        
        {renderPlan()}
        
        <div className="mt-4">
          <button
            onClick={() => setShowCodePreview(!showCodePreview)}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            {showCodePreview ? '🔽 Hide Code' : '📄 Show Generated Code'}
          </button>
          
          {showCodePreview && (
            <div className="mt-4">
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto">
                <pre className="text-sm">{mask(generateCodePreview())}</pre>
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border p-4 mb-4">
      <div className="text-gray-800 whitespace-pre-wrap">{message.text}</div>
    </div>
  );
}; 