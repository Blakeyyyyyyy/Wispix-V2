import React, { useState, useEffect, useRef } from 'react';
import { Send, Sparkles, Bot, User, Loader2 } from 'lucide-react';
import { LandingPage } from './components/LandingPage';

export default function App() {
  const [currentPage, setCurrentPage] = useState<'landing' | 'chat'>('landing');
  const [userRequest, setUserRequest] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [buildMode, setBuildMode] = useState<'employee' | 'agent'>('employee');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  const [sessionId, setSessionId] = useState<string>("");

  // Unified streaming function that works for both employee and agent modes
  const startUnifiedStreaming = async (request: string, thinkingId?: string) => {
    try {
      console.log('🚀 Starting smart model routing for:', request);
      
      // Use the new smart model routing endpoint for cost optimization
      const response = await fetch('http://localhost:3001/api/build-agent-smart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: request, sessionId: sessionId || Date.now().toString() })
      });

      console.log('📡 Unified streaming response received:', response.status, response.headers);
      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      if (!reader) throw new Error('No reader available');

      console.log('📖 Starting to read unified stream...');
      let clearedThinking = false;

      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          console.log('✅ Unified stream complete');
          break;
        }

        const chunk = decoder.decode(value, { stream: true });
        console.log('📦 Received unified chunk:', chunk);
        const lines = chunk.split('\n').map(l => l.trim()).filter(Boolean);

        for (const line of lines) {
          if (!line.startsWith('data: ')) continue;
          const data = line.slice(6);
          if (data === '[DONE]') {
            console.log('🏁 Unified server sent [DONE]');
            setIsLoading(false);
            continue;
          }

          try {
            const evt = JSON.parse(data);
            console.log('📋 Parsed unified event:', evt.type, evt.message?.substring(0, 50));

            if (!clearedThinking) {
              clearedThinking = true;
              if (thinkingId) {
                setMessages(prev => prev.filter(m => m.id !== thinkingId));
              }
            }

            if (evt.type === 'analyzing') {
              setMessages(prev => [...prev, {
                id: Date.now().toString() + '_analyzing',
                role: 'system',
                content: `🔍 ${evt.message}`,
                timestamp: new Date()
              }]);
              continue;
            }

            if (evt.type === 'planning') {
              setMessages(prev => [...prev, {
                id: Date.now().toString() + '_planning',
                role: 'system',
                content: `📋 ${evt.message}`,
                timestamp: new Date()
              }]);
              continue;
            }

            if (evt.type === 'plan-ready') {
              // Plan displayed directly in chat
              if (evt.metadata?.sessionId) {
                setSessionId(evt.metadata.sessionId);
              }
              setMessages(prev => [...prev, {
                id: Date.now().toString() + "_plan",
                role: "assistant",
                content: `📋 **AI Agent Plan Ready!**\n\n${evt.plan}\n\n💡 **Next Steps:** You can ask questions about this plan or request modifications.`,
                timestamp: new Date()
              }]);
              if (evt.metadata?.sessionId) {
                setAgentPlan({
                  id: evt.metadata.sessionId,
                  name: "AI Agent",
                  type: "General",
                  capabilities: ["AI-powered automation", "Smart decision making", "24/7 operation"],
                  requiredCredentials: ["API Keys", "Authentication tokens"],
                  estimatedCost: evt.metadata.totalCost || 29.99,
                  configuration: {}
                });
                setShowApproval(true);
              }
              setMessages(prev => [...prev, {
                id: Date.now().toString() + '_plan',
                role: 'assistant',
                content: `📋 **${buildMode === 'employee' ? 'Employee' : 'Agent'} Plan Ready!**\n\n${evt.plan}\n\n${evt.estimatedTime ? `⏱️ Estimated build time: ${evt.estimatedTime}` : ''}`,
                timestamp: new Date()
              }]);
              continue;
            }

            if (evt.type === 'complete') {
              setMessages(prev => [...prev, {
                id: Date.now().toString() + '_complete',
                role: 'system',
                content: `✅ ${evt.message}`,
                timestamp: new Date()
              }]);
              continue;
            }

            if (evt.type === 'error') {
              setMessages(prev => [...prev, {
                id: Date.now().toString() + '_err',
                role: 'assistant',
                content: '❌ ' + evt.message,
                timestamp: new Date()
              }]);
              continue;
            }
          } catch (parseError) {
            console.error('Parse error:', parseError);
          }
        }
      }
    } catch (error) {
      console.error('Unified streaming error:', error);
      setMessages(prev => [...prev, {
        id: Date.now().toString() + '_err',
        role: 'assistant',
        content: '❌ Network error. Please try again.',
        timestamp: new Date()
      }]);
      setIsLoading(false);
    }
  };

  const handleGetStarted = (request: string) => {
    setUserRequest(request);
    setCurrentPage('chat');

    // Initialize chat with the user's request as the first message
    const initialMessages: Message[] = [
      {
        id: '1',
        role: 'user',
        content: request,
        timestamp: new Date()
      }
    ];
    setMessages(initialMessages);

    // Add thinking and stream
    const thinkingId = Date.now().toString() + '_thinking';
    setMessages(prev => [...prev, {
      id: thinkingId,
      role: 'assistant',
      content: '',
      timestamp: new Date(),
      isThinking: true
    }]);
    setIsLoading(true);
    // Use unified streaming for both employee and agent modes
    startUnifiedStreaming(request, thinkingId);
  };

  const handleSubmit = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const request = input.trim();
    setInput('');
    setIsLoading(true);

    // Add thinking message
    const thinkingId = Date.now().toString() + '_thinking';
    setMessages(prev => [...prev, {
      id: thinkingId,
      role: 'assistant',
      content: '',
      timestamp: new Date(),
      isThinking: true
    }]);

    // Use unified streaming for both employee and agent modes
    startUnifiedStreaming(request, thinkingId);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  const handleBackToLanding = () => {
    setCurrentPage('landing');
    setUserRequest('');
    setMessages([]);
    setInput('');
    setIsLoading(false);
  };

  if (currentPage === 'landing') {
    return <LandingPage onGetStarted={handleGetStarted} />;
  }

        body: JSON.stringify({ 
          planId: agentPlan?.id,
          credentials, 
        })
      });
      
      if (!response.body) {
        throw new Error('No response body');
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));

              if (data === '[DONE]') {
                setShowApproval(false);
                break;
              }

              // Handle deployment progress
              if (data.type === 'building') {
                setMessages(prev => [...prev, {
                  id: Date.now().toString(),
                  role: 'system',
                  type: 'building',
                  content: `🔨 ${data.message}`,
                  timestamp: new Date(data.timestamp || Date.now()),
                  metadata: { isBuilding: true }
                }]);
              } else if (data.type === 'testing') {
                setMessages(prev => [...prev, {
                  id: Date.now().toString(),
                  role: 'system',
                  type: 'testing',
                  content: `🧪 ${data.message}`,
                  timestamp: new Date(data.timestamp || Date.now()),
                  metadata: { isTesting: true }
                }]);
              } else if (data.type === 'complete') {
                setMessages(prev => [...prev, {
                  id: Date.now().toString(),
                  role: 'system',
                  type: 'complete',
                  content: `✅ ${data.message}`,
                  timestamp: new Date(data.timestamp || Date.now()),
                  metadata: { isComplete: true, url: data.metadata?.url }
                }]);
              } else if (data.type === 'error') {
                setMessages(prev => [...prev, {
                  id: Date.now().toString(),
                  role: 'system',
                  type: 'error',
                  content: `❌ ${data.message}`,
                  timestamp: new Date(data.timestamp || Date.now()),
                  metadata: { isError: true }
                }]);
              }
            } catch (parseError) {
              console.error('Error parsing deployment data:', parseError);
            }
          }
        }
      }
    } catch (error) {
      console.error('Error deploying agent:', error);
      setMessages(prev => [...prev, {
        id: Date.now().toString(),
        role: 'system',
        type: 'error',
        content: 'Failed to deploy agent. Please try again.',
        timestamp: new Date(),
        metadata: { isError: true }
      }]);
    } finally {
      setShowApproval(false);
    }
  };

  return (
    <div className="flex h-screen bg-white">
      {/* Sidebar */}
      <div className="w-64 bg-gray-50 border-r border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-8">
          <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
            <Sparkles className="w-5 h-5 text-white" />
          </div>
          <span className="font-semibold text-lg">Wispix AI</span>
        </div>
        
        <button 
          onClick={handleBackToLanding}
          className="w-full text-left px-3 py-2 rounded-lg bg-white border border-gray-200 text-sm font-medium mb-2 hover:bg-gray-50"
        >
          ← Back to Landing
        </button>
        
        {/* Build Mode Toggle */}
        <div className="mt-4 mb-4">
          <div className="text-xs font-medium text-gray-700 mb-2">Build Mode</div>
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setBuildMode('employee')}
              className={`flex-1 px-3 py-2 text-xs rounded-md transition-colors ${
                buildMode === 'employee' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Employee
            </button>
            <button
              onClick={() => setBuildMode('agent')}
              className={`flex-1 px-3 py-2 text-xs rounded-md transition-colors ${
                buildMode === 'agent' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Agent
            </button>
          </div>
        </div>
        
        <div className="mt-4 space-y-1">
          <div className="px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg cursor-pointer">
            {buildMode === 'employee' ? 'AI Email Manager' : 'AI Agent Builder'}
          </div>
          <div className="px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 rounded-lg cursor-pointer">
            Previous chats...
          </div>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="border-b border-gray-200 px-6 py-4">
          <h1 className="text-lg font-semibold">
            {buildMode === 'employee' ? 'AI Employee Builder' : 'AI Agent Builder'}
          </h1>
          <p className="text-sm text-gray-500 mt-1">Building: {userRequest}</p>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto px-6 py-6">
          <div className="max-w-3xl mx-auto space-y-6">
            {messages.map((message) => (
              <div key={message.id} className="flex gap-3">
                <div className="w-8 h-8 rounded-lg flex-shrink-0 flex items-center justify-center">
                  {message.role === 'user' ? (
                    <div className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                      <User className="w-5 h-5 text-gray-600" />
                    </div>
                  ) : message.role === 'system' ? (
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Sparkles className="w-5 h-5 text-blue-600" />
                    </div>
                  ) : (
                    <div className="w-8 h-8 bg-black rounded-lg flex items-center justify-center">
                      <Bot className="w-5 h-5 text-white" />
                    </div>
                  )}
                </div>
                <div className="flex-1">
                  {message.isThinking ? (
                    <div className="flex items-center gap-2 text-gray-500">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-sm">Analyzing your requirements...</span>
                    </div>
                  ) : (
                    <div className="text-gray-800 whitespace-pre-wrap">{message.content}</div>
                  )}
                  <div className="text-xs text-gray-400 mt-1">
                    {message.timestamp.toLocaleTimeString()}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Input Area */}
        <div className="border-t border-gray-200 px-6 py-4">
          <div className="max-w-3xl mx-auto">
            <div className="relative">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyPress}
                placeholder="Describe what you need help with..."
                className="w-full px-4 py-3 pr-12 bg-gray-50 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={isLoading}
              />
              <button
                onClick={handleSubmit}
                disabled={!input.trim() || isLoading}
                className="absolute right-2 top-1/2 -translate-y-1/2 p-2 text-white bg-blue-500 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-4 h-4" />
              </button>
            </div>
            <div className="mt-2 text-xs text-gray-400 text-center">
              Try: "I need help managing my inbox" or "Create an AI to handle customer support"
            </div>
          </div>
        </div>
      </div>
      
      {/* Plan Approval Modal */}
        />
      )}
    </div>
  );
}
