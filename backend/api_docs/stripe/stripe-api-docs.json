{
  "provider": "stripe",
  "version": "v1",
  "content": "# Stripe API v1 – Complete Reference for Automation Agent\n\n---\n\n## 1. Authentication & General Rules\n\n- **Auth type**: API Key (Secret Key) as Bearer token.\n- **Header example**:\n  Authorization: Bearer sk_test_xxx\n- **Content-Type**: `application/x-www-form-urlencoded` or `application/json` (most endpoints support both; default examples are form-encoded).\n- **Base URL**: `https://api.stripe.com/v1/{resource}`\n- Use HTTPS/TLS 1.2+. Never send API key in query params or client-side code.\n- API version is determined by account or overridden via `Stripe-Version` header.\n\n---\n\n## 2. Rate Limits & Retry Behavior\n\n- Standard limits ≈ **100 read/sec** and **100 write/sec** per account; some objects (like subscriptions) have more constraints.\n- On `429 Too Many Requests`: response includes header `Retry-After` indicating seconds to wait; body returns `error.type = \"rate_limit_error\"`.\n- Retry strategy: exponential backoff; reuse idempotency key for safe retries on network/timeout/server errors; generate a new key if changing request parameters on 4xx.\n\n---\n\n## 3. Error Response Structure & Codes\n\nErrors return:\n\n```json\n{\n\"error\": {\n  \"type\": \"invalid_request_error\" | \"api_error\" | \"card_error\" | \"rate_limit_error\",\n  \"code\": \"string\" (optional),\n  \"message\": \"Human-readable detail\",\n  \"param\": \"field_name\" (optional)\n}\n}\n```\n\n**HTTP Status Codes:**\n- `400 Bad Request`: invalid_request_error (e.g. missing param or invalid amount).\n- `401 Unauthorized`: invalid_api_key.\n- `403 Forbidden`: insufficient access (rare).\n- `404 Not Found`: resource id invalid.\n- `429 Rate Limit`: rate_limit_error.\n\nUse new idempotency key when retrying after changing params to avoid cached errors on 400/401.\n\n**Common error.code strings include:**\n- `rate_limit_error`, `invalid_api_key`, `resource_missing`, `card_declined`, `amount_too_large`, `balance_insufficient`.\n\n---\n\n## 4. Pagination Mechanics\n\nEndpoint responses for listing operations contain:\n\n```json\n{\n  \"object\": \"list\",\n  \"data\": [ … ],\n  \"has_more\": true|false,\n  \"url\": \"/v1/resource\",\n}\n```\n\n**Pagination parameters:**\n- `limit` (integer, default 10, max 100)\n- `starting_after` (string, optional) – to advance forward\n- `ending_before` (string, optional) – to page backward\n\nLoop by calling again with `starting_after=data[-1].id` until `has_more=false`.\n\n---\n\n## 5. Core Endpoints\n\n### 5.1 `POST /v1/customers`\n\n**Purpose**: Create a customer.\n\n**Body params (form or JSON):**\n- `email` (string, optional)\n- `name` (string, optional)\n- `description` (string, optional)\n- `metadata[key]` (string, optional), up to 500 keys.\n\n**Response**: Customer object with id, email, etc.\n\n**Errors**: `invalid_request_error` if name/email invalid, `rate_limit_error`.\n\n### 5.2 `GET /v1/customers`\n\n**Purpose**: List customers.\n\n**Query params:**\n- `limit` (int, default 10, max 100)\n- `starting_after` / `ending_before` (string, optional)\n\n**Response**: Paginated list of customer objects.\n\n**Errors**: `rate_limit_error`.\n\n### 5.3 `POST /v1/charges`\n\n**Purpose**: Create a charge.\n\n**Body params:**\n- `amount` (integer, required) — in cents.\n- `currency` (string, required) — e.g. \"usd\".\n- `customer` or `source` (string, required).\n- `description`, `receipt_email`, `metadata[key]`: optional.\n- `idempotency_key` header recommended (string).\n\n**Response**: Charge object with status, balance_transaction, etc.\n\n**Errors:**\n- `card_error` (e.g. `card_declined`, `expired_card`)\n- `invalid_request_error`, `rate_limit_error`\n\n**Fix**: verify card, amount, currency; use idempotent key for retries.\n\n### 5.4 `GET /v1/charges`\n\n**Purpose**: List charges.\n\n**Query params**: `limit`, `starting_after`, `customer` filter.\n\n**Pagination**: same as above.\n\n**Errors**: `rate_limit_error`.\n\n### 5.5 `GET /v1/webhook_endpoints`\n\n**Purpose**: List configured webhook endpoints.\n\n**Query params**: `limit` (1–100), `starting_after`, `ending_before`.\n\n**Response:**\n\n```json\n{\n  \"object\": \"list\",\n  \"url\": \"/v1/webhook_endpoints\",\n  \"has_more\": false,\n  \"data\": [\n    {\n      \"id\":\"we_1...\", \"object\":\"webhook_endpoint\",\n      \"enabled_events\":[\"charge.succeeded\",\"charge.failed\"],\n      \"url\":\"https://…\", \"livemode\":false\n    }\n  ]\n}\n```\n\n**Errors**: negligible; listing never errors unless auth fails.\n\n---\n\n## 6. Webhooks Summary\n\nStripe sends HTTP POST JSON payloads to your webhook endpoint when events occur (e.g. `invoice.paid`, `charge.succeeded`).\n\n**Payload structure:**\n\n```json\n{\n  \"id\":\"evt_123\",\n  \"object\":\"event\",\n  \"type\":\"charge.succeeded\",\n  \"data\":{\"object\": { /* charge object */ } }\n}\n```\n\nRespond with HTTP 2xx quickly to acknowledge. Stripe retries delivery on non-2xx or timeouts.\n\nUse webhook signing secret to verify payload authenticity.\n\n---\n\n## 7. Endpoint Summary Table\n\n| Endpoint | Method | Key Params (required) | Supports Pagination | Notes |\n|----------|--------|----------------------|-------------------|-------|\n| `/customers` | POST | various (none required) | No | Use for onboarding; idempotent key recommended |\n| `/customers` | GET | `limit`, `starting_after` | Yes | Fetch existing customers |\n| `/charges` | POST | `amount`, `currency`, `customer/source` | No | Transactions; supports idempotency |\n| `/charges` | GET | `limit`, `customer`, pagination cursors | Yes | Historical charges list |\n| `/webhook_endpoints` | GET | pagination args | Yes | Webhook management |\n\n---\n\n## 8. Deprecated / Legacy Notes\n\n- **Sources API** (`/v1/sources`) is deprecated; use PaymentMethods instead.\n- Older APIs (like v1 Cards) gradually replaced by PaymentMethods and SetupIntents.\n- Expandable fields supported via `expand[]` parameter to retrieve nested objects inline.\n\n---\n\n## 9. Best Practices & Retry Guidelines\n\n- **Always use idempotency keys** when creating/modifying objects to avoid duplicate operations.\n- **Implement exponential backoff** on 429 or 5xx, respecting Retry-After.\n- **Log and inspect Stripe-Request-Id** for debugging.\n- **Use expand[]** to reduce API calls by embedding related objects.\n- **Apply filtering** (e.g. customer) to reduce result data and page count.\n- **Cache stable objects** (e.g. customer metadata) to minimize redundant GET calls.\n\n---\n\n## 10. Automation Examples\n\n### 10.1 Create Customer\n\n```javascript\n// Create a customer for recurring payments\nconst customer = await stripe.customers.create({\n  email: 'customer@example.com',\n  name: 'John Doe',\n  description: 'Premium customer',\n  metadata: {\n    customer_type: 'premium',\n    signup_date: new Date().toISOString()\n  }\n});\n\nreturn {\n  customer_id: customer.id,\n  email: customer.email\n};\n```\n\n### 10.2 Create Charge\n\n```javascript\n// Create a charge with idempotency\nconst charge = await stripe.charges.create({\n  amount: 2000, // $20.00 in cents\n  currency: 'usd',\n  customer: 'cus_1234567890',\n  description: 'Payment for order #123',\n  receipt_email: 'customer@example.com',\n  metadata: {\n    order_id: '123',\n    product_type: 'subscription'\n  }\n}, {\n  idempotencyKey: 'order_123_payment'\n});\n\nreturn {\n  charge_id: charge.id,\n  status: charge.status,\n  amount: charge.amount\n};\n```\n\n### 10.3 List Customers with Pagination\n\n```javascript\n// Get all customers with pagination\nlet allCustomers = [];\nlet hasMore = true;\nlet startingAfter = null;\n\nwhile (hasMore) {\n  const customers = await stripe.customers.list({\n    limit: 100,\n    starting_after: startingAfter\n  });\n  \n  allCustomers = allCustomers.concat(customers.data);\n  hasMore = customers.has_more;\n  startingAfter = customers.data[customers.data.length - 1]?.id;\n}\n\nreturn {\n  total_customers: allCustomers.length,\n  customers: allCustomers\n};\n```\n\n### 10.4 Webhook Handler\n\n```javascript\n// Handle Stripe webhook events\napp.post('/webhook', express.raw({type: 'application/json'}), (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  let event;\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err.message);\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  // Handle the event\n  switch (event.type) {\n    case 'charge.succeeded':\n      const charge = event.data.object;\n      console.log('Payment succeeded:', charge.id);\n      // Update order status, send confirmation email, etc.\n      break;\n    case 'charge.failed':\n      const failedCharge = event.data.object;\n      console.log('Payment failed:', failedCharge.id);\n      // Handle failed payment, notify customer, etc.\n      break;\n    case 'customer.created':\n      const customer = event.data.object;\n      console.log('Customer created:', customer.id);\n      // Welcome email, onboarding flow, etc.\n      break;\n    default:\n      console.log(`Unhandled event type: ${event.type}`);\n  }\n\n  res.json({received: true});\n});\n```\n\n---\n\nThis comprehensive Stripe API v1 documentation provides all the essential information needed for automation agents to create, manage, and process payments through the Stripe platform."
} 